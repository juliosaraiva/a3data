{
  "FastAPI Router": {
    "prefix": "fastapi-router",
    "body": [
      "from fastapi import APIRouter, Depends, HTTPException, status",
      "from pydantic import BaseModel",
      "",
      "router = APIRouter(prefix=\"/${1:endpoint}\", tags=[\"${2:tag}\"])",
      "",
      "",
      "class ${3:ModelName}Request(BaseModel):",
      "    \"\"\"${4:Request model description}.\"\"\"",
      "    ${5:field}: ${6:str}",
      "",
      "",
      "class ${3:ModelName}Response(BaseModel):",
      "    \"\"\"${7:Response model description}.\"\"\"",
      "    ${8:field}: ${9:str}",
      "",
      "",
      "@router.${10|get,post,put,delete,patch|}(\"/${11:path}\", response_model=${3:ModelName}Response)",
      "async def ${12:function_name}(",
      "    ${13:request}: ${3:ModelName}Request,",
      ") -> ${3:ModelName}Response:",
      "    \"\"\"${14:Function description}.\"\"\"",
      "    ${15:# Implementation}",
      "    return ${3:ModelName}Response(${8:field}=\"${16:value}\")"
    ],
    "description": "Create a FastAPI router with request/response models"
  },
  "Pydantic Model": {
    "prefix": "pydantic-model",
    "body": [
      "from pydantic import BaseModel, Field",
      "from typing import Optional",
      "",
      "",
      "class ${1:ModelName}(BaseModel):",
      "    \"\"\"${2:Model description}.\"\"\"",
      "",
      "    ${3:field_name}: ${4:str} = Field(",
      "        description=\"${5:Field description}\",",
      "        ${6:min_length=1}",
      "    )",
      "    ${7:optional_field}: Optional[${8:str}] = Field(",
      "        default=None,",
      "        description=\"${9:Optional field description}\"",
      "    )",
      "",
      "    class Config:",
      "        \"\"\"Pydantic configuration.\"\"\"",
      "        ${10:json_encoders = {}}",
      "        ${11:validate_assignment = True}"
    ],
    "description": "Create a Pydantic model with fields and configuration"
  },
  "Async Function with Type Hints": {
    "prefix": "async-func",
    "body": [
      "async def ${1:function_name}(",
      "    ${2:param}: ${3:str},",
      "    ${4:optional_param}: Optional[${5:str}] = None,",
      ") -> ${6:str}:",
      "    \"\"\"${7:Function description}.",
      "",
      "    Args:",
      "        ${2:param}: ${8:Parameter description}.",
      "        ${4:optional_param}: ${9:Optional parameter description}.",
      "",
      "    Returns:",
      "        ${10:Return value description}.",
      "",
      "    Raises:",
      "        ${11:ExceptionType}: ${12:Exception description}.",
      "    \"\"\"",
      "    ${13:# Implementation}",
      "    return ${14:result}"
    ],
    "description": "Create an async function with proper type hints and docstring"
  },
  "Exception Handler": {
    "prefix": "exception-handler",
    "body": [
      "@app.exception_handler(${1:ExceptionType})",
      "async def ${2:handler_name}(",
      "    request: Request,",
      "    exc: ${1:ExceptionType},",
      ") -> JSONResponse:",
      "    \"\"\"Handle ${1:ExceptionType} exceptions.\"\"\"",
      "    logger.error(f\"${3:Error message}: {exc}\", exc_info=True)",
      "    return JSONResponse(",
      "        status_code=status.HTTP_${4:500_INTERNAL_SERVER_ERROR},",
      "        content={",
      "            \"error\": \"${5:Error type}\",",
      "            \"message\": \"${6:User-friendly error message}\",",
      "            \"detail\": str(exc) if settings.DEBUG else None,",
      "        },",
      "    )"
    ],
    "description": "Create a FastAPI exception handler"
  },
  "Dependency Injection": {
    "prefix": "fastapi-dependency",
    "body": [
      "async def ${1:dependency_name}(",
      "    ${2:param}: ${3:str} = ${4:Depends(${5:dependency})},",
      ") -> ${6:ReturnType}:",
      "    \"\"\"${7:Dependency description}.",
      "",
      "    Args:",
      "        ${2:param}: ${8:Parameter description}.",
      "",
      "    Returns:",
      "        ${9:Return description}.",
      "",
      "    Raises:",
      "        HTTPException: ${10:Exception description}.",
      "    \"\"\"",
      "    try:",
      "        ${11:# Implementation}",
      "        return ${12:result}",
      "    except ${13:Exception} as e:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_${14:400_BAD_REQUEST},",
      "            detail=f\"${15:Error message}: {e}\",",
      "        )"
    ],
    "description": "Create a FastAPI dependency with error handling"
  },
  "Test Function": {
    "prefix": "test-func",
    "body": [
      "@pytest.mark.asyncio",
      "async def test_${1:function_name}_${2:should_behavior}_${3:when_condition}():",
      "    \"\"\"Test that ${1:function_name} ${2:should_behavior} when ${3:when_condition}.\"\"\"",
      "    # Arrange",
      "    ${4:# Setup test data}",
      "",
      "    # Act",
      "    ${5:result} = await ${6:function_call}",
      "",
      "    # Assert",
      "    assert ${7:assertion}",
      "    ${8:# Additional assertions}"
    ],
    "description": "Create a test function with arrange-act-assert pattern"
  },
  "Logger Setup": {
    "prefix": "logger-setup",
    "body": [
      "import logging",
      "",
      "logger = logging.getLogger(__name__)",
      "",
      "",
      "def setup_logging(level: str = \"INFO\") -> None:",
      "    \"\"\"Setup logging configuration.",
      "",
      "    Args:",
      "        level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL).",
      "    \"\"\"",
      "    logging.basicConfig(",
      "        level=getattr(logging, level.upper()),",
      "        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",",
      "        handlers=[",
      "            logging.StreamHandler(),",
      "            logging.FileHandler(\"app.log\"),",
      "        ],",
      "    )"
    ],
    "description": "Setup logging configuration"
  },
  "Configuration Model": {
    "prefix": "config-model",
    "body": [
      "from pydantic import Field",
      "from pydantic_settings import BaseSettings",
      "",
      "",
      "class ${1:ConfigName}(BaseSettings):",
      "    \"\"\"${2:Configuration description}.\"\"\"",
      "",
      "    ${3:setting_name}: ${4:str} = Field(",
      "        default=\"${5:default_value}\",",
      "        description=\"${6:Setting description}\",",
      "    )",
      "    ${7:api_key}: str = Field(",
      "        description=\"${8:API key description}\",",
      "    )",
      "",
      "    class Config:",
      "        \"\"\"Pydantic settings configuration.\"\"\"",
      "        env_file = \".env\"",
      "        env_file_encoding = \"utf-8\"",
      "        case_sensitive = False",
      "",
      "",
      "${9:config} = ${1:ConfigName}()"
    ],
    "description": "Create a configuration model using Pydantic Settings"
  },
  "Context Manager": {
    "prefix": "context-manager",
    "body": [
      "from contextlib import asynccontextmanager",
      "from typing import AsyncGenerator",
      "",
      "",
      "@asynccontextmanager",
      "async def ${1:context_name}(${2:param}: ${3:str}) -> AsyncGenerator[${4:ReturnType}, None]:",
      "    \"\"\"${5:Context manager description}.",
      "",
      "    Args:",
      "        ${2:param}: ${6:Parameter description}.",
      "",
      "    Yields:",
      "        ${7:Yield description}.",
      "    \"\"\"",
      "    ${8:# Setup}",
      "    try:",
      "        ${9:resource} = ${10:# Initialize resource}",
      "        yield ${9:resource}",
      "    finally:",
      "        ${11:# Cleanup}",
      "        pass"
    ],
    "description": "Create an async context manager"
  },
  "Enum Definition": {
    "prefix": "enum-def",
    "body": [
      "from enum import Enum",
      "",
      "",
      "class ${1:EnumName}(str, Enum):",
      "    \"\"\"${2:Enum description}.\"\"\"",
      "",
      "    ${3:VALUE_ONE} = \"${4:value_one}\"",
      "    ${5:VALUE_TWO} = \"${6:value_two}\"",
      "    ${7:VALUE_THREE} = \"${8:value_three}\""
    ],
    "description": "Create a string enum"
  }
}
